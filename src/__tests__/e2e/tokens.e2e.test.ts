/**
 * =================================================================
 * TESTS E2E - GESTI√ìN DE TOKENS (REFRESH Y LOGOUT)
 * =================================================================
 * 
 * PROP√ìSITO:
 * Este archivo contiene tests end-to-end para la gesti√≥n de tokens,
 * espec√≠ficamente para los flujos de renovaci√≥n de tokens (refresh)
 * y cierre de sesi√≥n (logout).
 * 
 * ¬øQU√â SON LOS TESTS E2E?
 * Los tests End-to-End simulan el comportamiento real de un usuario
 * interactuando con la API completa, desde la request HTTP hasta
 * la respuesta final, pasando por todos los middlewares, controladores
 * y servicios.
 * 
 * ¬øPOR QU√â ESTOS TESTS SON CR√çTICOS PARA EL MVP?
 * 1. **Seguridad**: Los tokens son la base de la autenticaci√≥n
 * 2. **UX**: Un logout que falla frustra al usuario
 * 3. **Sesiones**: El refresh permite sesiones largas sin re-login
 * 4. **Compliance**: NOM-024 requiere trazabilidad de sesiones
 * 
 * CASOS CUBIERTOS:
 * ‚úÖ Token refresh exitoso con refresh token v√°lido
 * ‚úÖ Rechazo de refresh con token inv√°lido/expirado
 * ‚úÖ Logout exitoso e invalidaci√≥n de tokens
 * ‚úÖ Verificaci√≥n de token v√°lido (/auth/verify)
 * 
 * =================================================================
 */

import { describe, it, expect, beforeEach } from 'vitest';
import { testRequest, testUserLogin, loginTestUser } from './setup';
import logger from '../../config/logger';
import { AuthErrorCode } from '../../types/auth';

/**
 * =================================================================
 * EXPLICACI√ìN DE CONCEPTOS CLAVE
 * =================================================================
 * 
 * 1. **ACCESS TOKEN vs REFRESH TOKEN**:
 *    - Access Token: Token de corta duraci√≥n (1 hora) para autenticar requests
 *    - Refresh Token: Token de larga duraci√≥n (30 d√≠as) para renovar access tokens
 *    - ¬øPor qu√© dos tokens? Seguridad: si roban el access token, expira pronto
 * 
 * 2. **FLUJO DE REFRESH**:
 *    - Cliente detecta que access token expir√≥ (401)
 *    - Cliente env√≠a refresh token a /auth/refresh
 *    - Servidor valida refresh token y genera nuevo access token
 *    - Cliente usa nuevo access token para requests
 * 
 * 3. **FLUJO DE LOGOUT**:
 *    - Cliente env√≠a request a /auth/logout con access token
 *    - Servidor invalida la sesi√≥n (marca tokens como inv√°lidos)
 *    - Cliente elimina tokens del storage local
 * 
 * 4. **VERIFICACI√ìN DE TOKEN**:
 *    - Endpoint /auth/verify permite validar si un token es v√°lido
 *    - √ötil para verificar estado de sesi√≥n sin hacer requests pesados
 * 
 * =================================================================
 */

describe('Auth E2E Tests - Gesti√≥n de Tokens', () => {

    /**
     * =================================================================
     * VARIABLES DE ESTADO PARA LOS TESTS
     * =================================================================
     * 
     * Estas variables almacenan el estado entre tests:
     * - validAccessToken: Token v√°lido obtenido del login
     * - validRefreshToken: Refresh token para renovaci√≥n
     * - expiredToken: Token expirado para tests negativos
     */
    let validAccessToken: string;
    let validRefreshToken: string;
    let expiredToken: string;
    let loginResponse: any;

    /**
     * =================================================================
     * SETUP ANTES DE CADA TEST
     * =================================================================
     * 
     * ¬øPOR QU√â beforeEach?
     * Cada test debe empezar con un estado limpio y predecible.
     * Hacemos login antes de cada test para obtener tokens frescos.
     */
    beforeEach(async () => {
        logger.info('üß™ Preparando tokens para test E2E', {
            action: 'e2e_tokens_setup',
            timestamp: new Date().toISOString()
        });

        // Hacer login para obtener tokens v√°lidos
        loginResponse = await loginTestUser();
        
        // Extraer tokens de la respuesta
        if (loginResponse.status === 200 && loginResponse.body.data) {
            validAccessToken = loginResponse.body.data.access_token;
            validRefreshToken = loginResponse.body.data.refresh_token || 'mock_refresh_token';
        }

        // Simular un token expirado (para tests negativos)
        expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.expired';

        logger.debug('üîë Tokens preparados para testing', {
            hasAccessToken: !!validAccessToken,
            hasRefreshToken: !!validRefreshToken,
            hasExpiredToken: !!expiredToken
        });
    });

    /**
     * =================================================================
     * TESTS DE REFRESH TOKEN
     * =================================================================
     */
    describe('POST /auth/refresh - Renovaci√≥n de Tokens', () => {

        /**
         * TEST 1: Refresh exitoso con token v√°lido
         * 
         * ESCENARIO:
         * - Given: Tengo un refresh token v√°lido
         * - When: Env√≠o request a /auth/refresh
         * - Then: Recibo un nuevo access token
         * 
         * ¬øQU√â VALIDAMOS?
         * - Status 200 (√©xito)
         * - Estructura de respuesta correcta
         * - Nuevo access token presente
         * - Metadatos de respuesta
         */
        it('deber√≠a renovar access token con refresh token v√°lido', async () => {
            // Arrange: Preparar datos de refresh
            const refreshData = {
                refresh_token: validRefreshToken
            };

            logger.info('üîÑ Iniciando test de refresh token exitoso', {
                hasRefreshToken: !!refreshData.refresh_token,
                action: 'test_refresh_success_start'
            });

            try {
                // Act: Enviar request de refresh
                const response = await testRequest
                    .post('/auth/refresh')
                    .send(refreshData);

                // Log de debugging
                console.log('=== RESPUESTA DE REFRESH TOKEN ===', {
                    status: response.status,
                    body: response.body,
                    headers: response.headers
                });

                // Assert: Verificar respuesta
                // NOTA: Actualmente el endpoint devuelve 501 (Not Implemented)
                // Cuando se implemente, deber√≠a ser 200
                if (response.status === 501) {
                    // Verificar que es el error esperado de "no implementado"
                    expect(response.body).toHaveProperty('success', false);
                    expect(response.body.error).toHaveProperty('code', AuthErrorCode.NOT_IMPLEMENTED);
                    expect(response.body.error.message).toContain('no implementada');
                    
                    logger.info('‚ö†Ô∏è Refresh token no implementado (esperado)', {
                        status: response.status,
                        code: response.body.error?.code
                    });
                } else {
                    // Cuando est√© implementado, verificar estructura correcta
                    expect(response.status).toBe(200);
                    expect(response.body).toHaveProperty('success', true);
                    expect(response.body.data).toHaveProperty('access_token');
                    expect(response.body.data).toHaveProperty('expires_in');
                    expect(response.body).toHaveProperty('timestamp');
                }

                logger.info('‚úÖ Test de refresh token completado');

            } catch (error) {
                logger.error('‚ùå Error en test de refresh token', {
                    error: error.message,
                    stack: error.stack
                });
                throw error;
            }
        });

        /**
         * TEST 2: Rechazo con refresh token inv√°lido
         * 
         * ESCENARIO:
         * - Given: Tengo un refresh token inv√°lido/malformado
         * - When: Env√≠o request a /auth/refresh
         * - Then: Recibo error 400 o 401
         * 
         * ¬øPOR QU√â ES IMPORTANTE?
         * - Prevenir ataques con tokens falsos
         * - Validar manejo de errores
         * - Asegurar mensajes de error claros
         */
        it('deber√≠a rechazar refresh con token inv√°lido', async () => {
            // Arrange: Token inv√°lido
            const invalidRefreshData = {
                refresh_token: 'token_invalido_malformado'
            };

            logger.info('üö´ Iniciando test de refresh token inv√°lido', {
                action: 'test_refresh_invalid_start'
            });

            // Act: Enviar request con token inv√°lido
            const response = await testRequest
                .post('/auth/refresh')
                .send(invalidRefreshData);

            console.log('=== RESPUESTA CON TOKEN INV√ÅLIDO ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar rechazo
            // Puede ser 501 (no implementado) o 400/401 cuando est√© implementado
            if (response.status === 501) {
                expect(response.body.error.code).toBe(AuthErrorCode.NOT_IMPLEMENTED);
            } else {
                expect([400, 401]).toContain(response.status);
                expect(response.body).toHaveProperty('success', false);
                expect(response.body).toHaveProperty('error');
            }

            logger.info('‚úÖ Test de refresh token inv√°lido completado');
        });

        /**
         * TEST 3: Rechazo sin refresh token
         * 
         * ESCENARIO:
         * - Given: No env√≠o refresh token en el body
         * - When: Env√≠o request a /auth/refresh
         * - Then: Recibo error 400 (Bad Request)
         */
        it('deber√≠a rechazar refresh sin token', async () => {
            logger.info('üö´ Iniciando test de refresh sin token', {
                action: 'test_refresh_missing_start'
            });

            // Act: Enviar request sin refresh token
            const response = await testRequest
                .post('/auth/refresh')
                .send({}); // Body vac√≠o

            console.log('=== RESPUESTA SIN REFRESH TOKEN ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar error 400
            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body.error).toHaveProperty('code', AuthErrorCode.TOKEN_MISSING);
            expect(response.body.error.message).toContain('Refresh token requerido');

            logger.info('‚úÖ Test de refresh sin token completado');
        });
    });

    /**
     * =================================================================
     * TESTS DE LOGOUT
     * =================================================================
     */
    describe('POST /auth/logout - Cierre de Sesi√≥n', () => {

        /**
         * TEST 4: Logout exitoso
         * 
         * ESCENARIO:
         * - Given: Estoy autenticado con un token v√°lido
         * - When: Env√≠o request a /auth/logout
         * - Then: Mi sesi√≥n se cierra exitosamente
         * 
         * ¬øQU√â VALIDAMOS?
         * - Status 200 (√©xito)
         * - Mensaje de confirmaci√≥n
         * - Logs de auditor√≠a generados
         * - Token queda invalidado (idealmente)
         */
        it('deber√≠a cerrar sesi√≥n exitosamente con token v√°lido', async () => {
            // Verificar que tenemos un token v√°lido
            expect(validAccessToken).toBeDefined();

            logger.info('üö™ Iniciando test de logout exitoso', {
                hasToken: !!validAccessToken,
                action: 'test_logout_success_start'
            });

            // Act: Enviar request de logout con token v√°lido
            const response = await testRequest
                .post('/auth/logout')
                .set('Authorization', `Bearer ${validAccessToken}`);

            console.log('=== RESPUESTA DE LOGOUT ===', {
                status: response.status,
                body: response.body,
                headers: response.headers
            });

            // Assert: Verificar logout exitoso
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body.message).toContain('Sesi√≥n cerrada exitosamente');
            expect(response.body).toHaveProperty('timestamp');

            logger.info('‚úÖ Test de logout exitoso completado');
        });

        /**
         * TEST 5: Logout sin token de autorizaci√≥n
         * 
         * ESCENARIO:
         * - Given: No env√≠o token de autorizaci√≥n
         * - When: Env√≠o request a /auth/logout
         * - Then: Recibo error 401 (Unauthorized)
         * 
         * ¬øPOR QU√â ES IMPORTANTE?
         * - Prevenir logout de sesiones ajenas
         * - Validar middleware de autenticaci√≥n
         * - Asegurar que las rutas protegidas est√°n protegidas
         */
        it('deber√≠a rechazar logout sin token de autorizaci√≥n', async () => {
            logger.info('üö´ Iniciando test de logout sin autorizaci√≥n', {
                action: 'test_logout_unauthorized_start'
            });

            // Act: Enviar request sin header Authorization
            const response = await testRequest
                .post('/auth/logout');
                // No enviamos .set('Authorization', ...)

            console.log('=== RESPUESTA LOGOUT SIN AUTH ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar rechazo
            expect(response.status).toBe(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body.error).toHaveProperty('code', AuthErrorCode.TOKEN_MISSING);

            logger.info('‚úÖ Test de logout sin autorizaci√≥n completado');
        });

        /**
         * TEST 6: Logout con token inv√°lido
         * 
         * ESCENARIO:
         * - Given: Env√≠o un token malformado o expirado
         * - When: Env√≠o request a /auth/logout
         * - Then: Recibo error 401 (Unauthorized)
         */
        it('deber√≠a rechazar logout con token inv√°lido', async () => {
            logger.info('üö´ Iniciando test de logout con token inv√°lido', {
                action: 'test_logout_invalid_token_start'
            });

            // Act: Enviar request con token inv√°lido
            const response = await testRequest
                .post('/auth/logout')
                .set('Authorization', `Bearer ${expiredToken}`);

            console.log('=== RESPUESTA LOGOUT TOKEN INV√ÅLIDO ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar rechazo
            expect(response.status).toBe(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body.error.code).toMatch(/TOKEN_INVALID|TOKEN_EXPIRED/);

            logger.info('‚úÖ Test de logout con token inv√°lido completado');
        });
    });

    /**
     * =================================================================
     * TESTS DE VERIFICACI√ìN DE TOKEN
     * =================================================================
     */
    describe('GET /auth/verify - Verificaci√≥n de Token', () => {

        /**
         * TEST 7: Verificaci√≥n exitosa de token v√°lido
         * 
         * ESCENARIO:
         * - Given: Tengo un token v√°lido
         * - When: Env√≠o request a /auth/verify
         * - Then: Recibo confirmaci√≥n de que el token es v√°lido
         * 
         * ¬øPARA QU√â SIRVE?
         * - Verificar estado de sesi√≥n sin hacer requests pesados
         * - Validar tokens antes de operaciones cr√≠ticas
         * - Debugging de problemas de autenticaci√≥n
         */
        it('deber√≠a verificar token v√°lido exitosamente', async () => {
            expect(validAccessToken).toBeDefined();

            logger.info('‚úÖ Iniciando test de verificaci√≥n de token v√°lido', {
                hasToken: !!validAccessToken,
                action: 'test_verify_valid_start'
            });

            // Act: Verificar token v√°lido
            const response = await testRequest
                .get('/auth/verify')
                .set('Authorization', `Bearer ${validAccessToken}`);

            console.log('=== RESPUESTA DE VERIFICACI√ìN ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar respuesta exitosa
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body.message).toContain('Token v√°lido');
            expect(response.body.data).toHaveProperty('user');
            expect(response.body.data).toHaveProperty('token_info');
            expect(response.body.data.token_info).toHaveProperty('expires_at');
            expect(response.body.data.token_info).toHaveProperty('issued_at');

            logger.info('‚úÖ Test de verificaci√≥n de token v√°lido completado');
        });

        /**
         * TEST 8: Verificaci√≥n de token inv√°lido
         * 
         * ESCENARIO:
         * - Given: Tengo un token inv√°lido o expirado
         * - When: Env√≠o request a /auth/verify
         * - Then: Recibo error 401
         */
        it('deber√≠a rechazar verificaci√≥n de token inv√°lido', async () => {
            logger.info('üö´ Iniciando test de verificaci√≥n de token inv√°lido', {
                action: 'test_verify_invalid_start'
            });

            // Act: Verificar token inv√°lido
            const response = await testRequest
                .get('/auth/verify')
                .set('Authorization', `Bearer ${expiredToken}`);

            console.log('=== RESPUESTA VERIFICACI√ìN INV√ÅLIDA ===', {
                status: response.status,
                body: response.body
            });

            // Assert: Verificar rechazo
            expect(response.status).toBe(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body.error.code).toMatch(/TOKEN_INVALID|TOKEN_EXPIRED/);

            logger.info('‚úÖ Test de verificaci√≥n de token inv√°lido completado');
        });
    });
});

/**
 * =================================================================
 * NOTAS DE IMPLEMENTACI√ìN Y DEBUGGING
 * =================================================================
 * 
 * 1. **ESTADO ACTUAL**:
 *    - Login y logout est√°n implementados
 *    - Refresh token devuelve 501 (Not Implemented)
 *    - Verify token est√° implementado
 * 
 * 2. **CUANDO IMPLEMENTES REFRESH TOKEN**:
 *    - Actualizar los asserts en los tests de refresh
 *    - Cambiar expectativas de 501 a 200/400/401
 *    - Agregar validaci√≥n de estructura de respuesta
 * 
 * 3. **DEBUGGING**:
 *    - Todos los tests tienen logs detallados
 *    - Console.log para ver respuestas completas
 *    - Logger para trazabilidad en desarrollo
 * 
 * 4. **SEGURIDAD**:
 *    - Tests validan tanto casos positivos como negativos
 *    - Verifican c√≥digos de error espec√≠ficos
 *    - Aseguran que rutas protegidas est√°n protegidas
 * 
 * 5. **COMPLIANCE NOM-024**:
 *    - Logout genera logs de auditor√≠a
 *    - Trazabilidad de sesiones
 *    - Timestamps en todas las operaciones
 * 
 * =================================================================
 */