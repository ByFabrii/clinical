# =================================================================
# GITHUB ACTIONS - CI/CD PARA VERCEL
# =================================================================
# 
# Este workflow automatiza el proceso de testing, build y deploy
# del backend del Sistema de Expedientes Dentales en Vercel.
# 
# CARACTER√çSTICAS:
# 1. Testing autom√°tico en pull requests
# 2. Deploy autom√°tico a staging en push a develop
# 3. Deploy autom√°tico a producci√≥n en push a main
# 4. Notificaciones de estado
# 5. Rollback autom√°tico en caso de fallo
# 
# =================================================================

name: üöÄ Deploy Backend to Vercel

on:
  # Trigger en push a ramas principales
  push:
    branches:
      - main        # Producci√≥n
      - develop     # Staging
    paths:
      - 'backend/**'
      - '.github/workflows/vercel-deploy.yml'
  
  # Trigger en pull requests
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

  # Trigger manual
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

# Variables de entorno globales
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'

jobs:
  # =================================================================
  # JOB 1: TESTING Y VALIDACI√ìN
  # =================================================================
  test:
    name: üß™ Tests y Validaci√≥n
    runs-on: ubuntu-latest
    
    # Solo ejecutar tests en PRs y pushes que no sean a main
    if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: üì¶ Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm install
      
      - name: üèóÔ∏è Build project
        run: npm run build
      
  # =================================================================
  # JOB 2: DEPLOY A PREVIEW/STAGING
  # =================================================================
  deploy-preview:
    name: üöÄ Deploy to Preview
    runs-on: ubuntu-latest
    
    # Ejecutar en PRs o push a develop
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
    
    # Depende de tests (si existen)
    needs: [test]
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: üì¶ Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: üîß Install dependencies
        run: npm install
      
      - name: üèóÔ∏è Build project
        run: npm run build
      
      - name: üì¶ Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: üîó Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üöÄ Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $url"
      
      - name: üí¨ Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview Deploy Ready!**
              
              **URL:** ${{ steps.deploy.outputs.url }}
              **Environment:** Staging
              **Commit:** ${context.sha.substring(0, 7)}
              
              ‚úÖ Backend API is ready for testing!`
            })

  # =================================================================
  # JOB 3: DEPLOY A PRODUCCI√ìN
  # =================================================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    
    # Solo en push a main o trigger manual a producci√≥n
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: üì¶ Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: üîß Install dependencies
        run: npm install
      
      - name: üèóÔ∏è Build project
        run: npm run build
      
      - name: üß™ Run production tests
        run: npm run test:unit
        env:
          NODE_ENV: production
      
      - name: üì¶ Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: üîó Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üöÄ Deploy to Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "üåü Deployed to production: $url"
      
      - name: üîç Health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
          echo "‚úÖ Health check passed!"
      
      - name: üì¢ Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"

  # =================================================================
  # JOB 4: NOTIFICACIONES Y CLEANUP
  # =================================================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [test, deploy-preview, deploy-production]
    
    steps:
      - name: üìä Deployment Summary
        run: |
          echo "## üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Preview Deploy | ${{ needs.deploy-preview.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "üéâ **Production deployment successful!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-preview.result }}" == "success" ]]; then
            echo "üöÄ **Preview deployment successful!**" >> $GITHUB_STEP_SUMMARY
          fi

# =================================================================
# CONFIGURACI√ìN DE SECRETS REQUERIDOS
# =================================================================
#
# Los siguientes secrets deben configurarse en GitHub:
#
# VERCEL_TOKEN          - Token de API de Vercel
# VERCEL_ORG_ID         - ID de la organizaci√≥n en Vercel
# VERCEL_PROJECT_ID     - ID del proyecto en Vercel
# SUPABASE_URL_TEST     - URL de Supabase para testing
# SUPABASE_ANON_KEY_TEST - Clave an√≥nima de Supabase para testing
#
# =================================================================